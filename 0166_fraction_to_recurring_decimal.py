# -*- coding: utf-8 -*-
"""166. Fraction to Recurring Decimal.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nOI5HNQBKDHfRCzIyvGJ9y1_4o4u2heG
"""

class Solution:
    def fractionToDecimal(self, numerator: int, denominator: int) -> str:
        negative = numerator * denominator < 0
        numerator, denominator = abs(numerator), abs(denominator)
        
        # First division
        quotient, remainder = divmod(numerator, denominator)
        remainders = {}
        res = [str(quotient)]
        
        # If not divided exactly, repeat until remainder is zero or loop
        i = 0
        while remainder != 0 and remainder not in remainders:
            remainders[remainder] = i
            quotient, remainder = divmod(remainder * 10, denominator)
            res.append(str(quotient))
            i += 1
        
        # Add sign
        if negative:
            res[0] = '-' + res[0]
        
        # Return result
        if remainder == 0:
            if len(res) == 1:
                return res[0]
            else:
                return res[0] + '.' + ''.join(res[1:])

        return res[0] + '.' + ''.join(res[1:remainders[remainder] + 1]) + '(' + ''.join(res[remainders[remainder] + 1:]) + ')'