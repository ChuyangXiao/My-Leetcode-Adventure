# -*- coding: utf-8 -*-
"""236. Lowest Common Ancestor of a Binary Tree.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wlRJ_2Ygdp3jZw6JaTveCQjPHyS3m2eJ
"""

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:

    def fun(self, root, p, q):
        if root:
            
            # if any node value is matching, return the node value
            if root == p or root == q:
                return root
            
            
            left = self.fun(root.left, p, q)
            right = self.fun(root.right, p, q)

            # if both left and right are not null return the root 
            # this root is the lowest common ancestor
            
            if left and right:
                return root
            
            # if any of the left or right side has found a value return it
            return left or right
    
    
    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':

        
        out = self.fun(root, p, q)

        # print(out)
        return out