# -*- coding: utf-8 -*-
"""323. Number of Connected Components in an Undirected Graph.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_fSwTyEk7_SP3L9c3OXAC7OPrC1LqrTT
"""

class Solution:
    def countComponents(self, n: int, edges: List[List[int]]) -> int:
        
        adj = [[] for i in range(n)]
        for [first, second] in edges:
            if second not in adj[first]:
                adj[first].append(second)
            if first not in adj[second]:
                adj[second].append(first)

        unvisited = set()
        for i in range(n):
            unvisited.add(i) # Put all nodes to start
        ret = 0
        while len(unvisited) != 0:
            # Get first elem AND remove from set
            q = [unvisited.pop()]
            while q:
                cur = q.pop()
                neighbors = adj[cur]
                for neighbor in neighbors:
                    if neighbor in unvisited:
                        q.append(neighbor)
                if cur in unvisited: # key error thrown if not removed
                    unvisited.remove(cur)
            ret += 1

        return ret