# -*- coding: utf-8 -*-
"""655. Print Binary Tree.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10LfkWzwmz2AaStSJaeNNynSCzJK3m3R1
"""

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution(object):
    def printTree(self, root):
        """
        :type root: TreeNode
        :rtype: List[List[str]]
        """
        def height(node):
            if node is None:
                return 0
            else:
                # Compute the height of each subtree
                # Use the larger one
                return max(height(node.left), height(node.right))+1
        
        # First calculate the height of the 
        h = height(root)
        
        def update(node, row, left, right):
            if not node:
                return 
            mid = (left+right)/2
            self.output[row][mid] = str(node.val)
            update(node.left, row+1, left, mid-1)
            update(node.right, row+1, mid+1,right)
        
        width = 2**h -1
        self.output = [['']*width for i in xrange(h)]
        update(root, 0,0,width-1)
        
        return self.output