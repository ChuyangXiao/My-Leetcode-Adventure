# -*- coding: utf-8 -*-
"""34. Find First and Last Position of Element in Sorted Array.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_ZEh3qSsjaHYAJZVB4fBGhI5VKdQ-YGo
"""

class Solution:
    def first(self,arr, low, high, x, n):
        if(high >= low):
            mid = low + (high - low) // 2
            if((mid == 0 or x > arr[mid - 1]) and arr[mid] == x):
                return mid
            elif(x > arr[mid]):
                return self.first(arr, (mid + 1), high, x, n)
            else:
                return self.first(arr, low, (mid - 1), x, n)
 
        return -1
    def last(self, arr, low, high, x, n):
        if (high >= low):
            mid = low + (high - low) // 2
            if ((mid == n - 1 or x < arr[mid + 1]) and arr[mid] == x):
                return mid
            elif (x < arr[mid]):
                return self.last(arr, low, (mid - 1), x, n)
            else:
                return self.last(arr, (mid + 1), high, x, n)
 
        return -1
    
    def searchRange(self, nums: List[int], target: int) -> List[int]:
        n = len(nums)
        x = target
        a = self.first(nums, 0, n - 1, x, n)
        b = self.last(nums, 0, n - 1, x, n)
        return [a,b]