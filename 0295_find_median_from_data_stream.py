# -*- coding: utf-8 -*-
"""295. Find Median from Data Stream.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/198DcCAMhy54OCsPv6D8Y6s9EfqdtTeM7
"""

class MedianFinder:

    def __init__(self):
        self.min_heap = []
        self.max_heap = []

    def addNum(self, num: int) -> None:
        if not self.max_heap or num<=-self.max_heap[0]:
            heapq.heappush(self.max_heap, -num)
            if len(self.max_heap)>len(self.min_heap)+1:
                heapq.heappush(self.min_heap, -heapq.heappop(self.max_heap))
        else:
            heapq.heappush(self.min_heap, num)
            if len(self.min_heap)>len(self.max_heap)+1:
                heapq.heappush(self.max_heap, -heapq.heappop(self.min_heap))

    def findMedian(self) -> float:
        if len(self.max_heap)==len(self.min_heap):
            return (self.min_heap[0]-self.max_heap[0])/2
        elif len(self.max_heap)>len(self.min_heap):
            return -self.max_heap[0]
        else:
            return self.min_heap[0]