# -*- coding: utf-8 -*-
"""210. Course Schedule II.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1neovFFmhjJ1r_GwFCSLZ5FcrzkY7BMzN
"""

class Solution:
    def findOrder(self, numCourses: int, prerequisites: List[List[int]]) -> List[int]:
        
        # Creat a heapmap to record the pre relationship
        premap = {i:[] for i in range(numCourses) }
        
        for crs,pre in prerequisites:
            
            premap[crs].append(pre)
            
        # Create a set to record the "safe" nodes
        visited = set()
        
        # Create a set to detect the cycle
        cycle = set()
        
        # Create a list to record the output
        output = []

        def dfs(crs):
            
            # If that course in in the cycle set
            # There is a cycle in the graph
            if crs in cycle:
                return False
            
            # If that course is tested to be safe
            elif crs in visited:
                return True
            
            # If the course has not been visited so far
            # We test it right now
            else:
                
                cycle.add(crs)
                
                for pre in premap[crs]:
                    
                    # We consider that there is a cycle in the graph
                    # Also when we found that the
                    if dfs(pre) == False:
                        return False
                    
                # It is approved that this course is not in the cycle
                cycle.remove(crs)
                    
                # Acknowledge that that course is "safe"
                visited.add(crs)
                    
                output.append(crs)
                return True
        
        for crs in range(numCourses):
            
            if dfs(crs) == False: return []
            
        return output