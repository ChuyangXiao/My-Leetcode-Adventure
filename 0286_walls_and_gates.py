# -*- coding: utf-8 -*-
"""286. Walls and Gates.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aLAhVNITWclyvx1wcKiI6Qay1pqbpyJH
"""

class Solution:
    def wallsAndGates(self, rooms: List[List[int]]) -> None:
        
        def addroom(r,c):
            # If the index is out of range or is a wall
            # It could not be considered valid
            if r<0 or c<0 or r>=ROWS or c>= COLS or (r,c) in visit or rooms[r][c] ==-1:
                return
            
            # Otherwise we will calculate its distance
            else:
                visit.add((r,c))
                q.append([r,c])

        ROWS, COLS = len(rooms), len(rooms[0])
        
        visit = set()
        q = deque()
        
        for r in range(ROWS):
            for c in range(COLS):
                if rooms[r][c] == 0:
                    
                    # Select only the empty room
                    visit.add((r,c))
                    q.append([r,c])
        
        dist = 0
        
        # Operate on only when there are elements in q
        while q:
            for i in range(len(q)):
                r, c = q.popleft()
                rooms[r][c] = dist
                
                addroom(r-1,c)
                addroom(r+1,c)
                addroom(r,c+1)
                addroom(r,c-1)
            dist = dist+1