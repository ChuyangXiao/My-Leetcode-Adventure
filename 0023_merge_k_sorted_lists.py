# -*- coding: utf-8 -*-
"""23. Merge k Sorted Lists.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QbX1Hc8E5yfUFZQ3rfJ0VgYbshbDjJk4
"""

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def mergeKLists(self, lists: List[Optional[ListNode]]) -> Optional[ListNode]:
        if not lists or len(lists) ==0:
            return None
        while len(lists) >1:
            merged = []
            for i in range(0,len(lists),2):
                l1 = lists[i]
                l2 = lists[i+1] if i +1 < len(lists) else None
                merged.append(self. mergeTwoLists(l1,l2))
            lists = merged
        return lists[0]
        
    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:
        if not list1:
            return list2
        elif not list2:
            return list1
        else:
            if list1.val <= list2.val:
                merged_list = ListNode(val=list1.val)
                merged_list.next = self.mergeTwoLists(list1.next, list2)
            else:
                merged_list = ListNode(val=list2.val)
                merged_list.next = self.mergeTwoLists(list1, list2.next)
            
        return merged_list