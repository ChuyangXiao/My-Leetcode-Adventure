# -*- coding: utf-8 -*-
"""1326. Minimum Number of Taps to Open to Water a Garden.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gmc1GDniEly8TBd60Cx9KCII_tzXNp5g
"""

class Solution:
    def minTaps(self, n: int, ranges: List[int]) -> int:
        # Convert the ranges for pipes into intervals
        # and filter out pipes with range 0
        intervals = [(i-ranges[i], i+ranges[i]) 
                     for i in range(n+1) 
                     if ranges[i] != 0]
        
        # Sort the intervals by their starting points
        intervals.sort()
        
        start = count = i = 0
        while True:
            
            # Find an interval starting at <= start, with the max end
            curr = None
            while i < len(intervals) and intervals[i][0] <= start:
                if not curr or intervals[i][1] > curr[1]:                    
                    curr = intervals[i]
                i += 1
            
            # if we couldn't find such an interval
            if not curr:
                return -1
                        
            count += 1
            
            # if we have reached the end of the garden
            if curr[1] >= n:
                return count            
            
            # update the start to the end of the selected interval
            start = curr[1]