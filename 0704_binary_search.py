# -*- coding: utf-8 -*-
"""704. Binary Search.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EaXPHz0cLzjWrgSXlQKLti5v5y4knzXm
"""

class Solution:
    def search(self, nums: List[int], target: int) -> int:
        def binarySearch(arr, l, r, x):
 
            # Check base case
            if r >= l:
 
                mid = l + (r - l) // 2
 
                # If element is present at the middle itself
                if arr[mid] == x:
                    return mid
 
                # If element is smaller than mid, then it
                # can only be present in left subarray
                elif arr[mid] > x:
                    return binarySearch(arr, l, mid-1, x)
 
                # Else the element can only be present
                # in right subarray
                else:
                    return binarySearch(arr, mid + 1, r, x)
 
            else:
                # Element is not present in the array
                return -1
        
        res = binarySearch(nums, 0, len(nums)-1, target)
        
        return res