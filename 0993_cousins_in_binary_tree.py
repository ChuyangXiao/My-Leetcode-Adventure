# -*- coding: utf-8 -*-
"""993. Cousins in Binary Tree.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Orz5ToKlzNSmSH0w_25dxj17VlhScgtk
"""

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def isCousins(self, root: Optional[TreeNode], x: int, y: int) -> bool:
        
        # Create a dict that projects level to nodes
        d = defaultdict(list)
        
        flag = []
        def bfs(node, level):
            
            if not node: 
                return
            
            d[level].append(node.val)
            
            # Check whether the two targets have same parent
            if node.left and node.right:
                if node.left.val == x and node.right.val == y:
                    flag.append(False)
                elif node.left.val == y and node.right.val == x:
                    flag.append(False)
                    
            # Increment on the level until it reaches the height of the tree
            bfs(node.left, level+1)
            bfs(node.right, level+1)
            
            
        
        bfs(root, 0)
        
        print(flag)
        if False in flag:
            return False
        else:
            for i in d.values():
                if x in i:
                    if y in i:
                        return True
                    else:
                        return False