# -*- coding: utf-8 -*-
"""594. Longest Harmonious Subsequence.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Wcq1SHTSDN0mYn8OSu0IIip2n0heOPYV
"""

class Solution:
    def findLHS(self, nums: List[int]) -> int:
        hashmap = {}
        count = 0
        
        for i in range(len(nums)):
            if nums[i] not in hashmap:
                hashmap[nums[i]] = 1
            else:
                hashmap[nums[i]] += 1
        if len(hashmap) <= 1:
            return 0
        for key in hashmap:
            if key + 1 in hashmap:
                count = max(count, hashmap[key] + hashmap[key + 1])
            
        return count