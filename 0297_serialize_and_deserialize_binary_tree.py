# -*- coding: utf-8 -*-
"""297. Serialize and Deserialize Binary Tree.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1p7U83YaTu_FdZFRLxHql3SYq7yGVpF4e
"""

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Codec:

    def serialize(self, root):
        arr=[]
        def dfs(node):
            if not node: 
                arr.append("n")
                return
            arr.append(str(node.val))
            dfs(node.left)
            dfs(node.right)
        dfs(root)
        return "#".join(arr)
        

    def deserialize(self, data):
        n=len(data)
        root=TreeNode()
        idx=0
        def dfs(node):
            nonlocal idx
            if data[idx]=="n": 
                idx+=2
                return 0
            s=""
            while idx<n and data[idx] not in ("#","n"):
                s+=data[idx]
                idx+=1
            if data[idx]=="#": idx+=1
            if idx>=n or not s: 
                return 0
            if not node:
                node=TreeNode()
            node.left,node.right=TreeNode(),TreeNode()
            node.val=int(s)
            if not dfs(node.left): node.left=None
            if not dfs(node.right): node.right=None
            return 1
        temp=root
        if not dfs(temp): return None
        return root
        
        

# Your Codec object will be instantiated and called as such:
# ser = Codec()
# deser = Codec()
# ans = deser.deserialize(ser.serialize(root))