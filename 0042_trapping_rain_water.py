# -*- coding: utf-8 -*-
"""42. Trapping Rain Water.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SvACm9CaOQqXEX9tXs7dGbwF4pUbTe-h
"""

class Solution:
    '''
    Central idea is that at each index i, the capacity is min(maxLeft, maxRight) - height[i]
    where maxLeft and maxRight are the maximal values on both sides
    
    '''
    
    def trap(self, nums: List[int]) -> int:
        
        if not nums: return 0
  
        maxL_d = {}
        maxR_d = {}

        maxL = 0
        maxR = 0

        for i in range(len(nums)):
            L = i
            R = len(nums)-1-i

            maxL_d[L], maxR_d[R] = maxL,maxR

            if nums[L] > maxL:
                maxL = nums[L]
            if nums[R] > maxR:
                maxR = nums[R]

        res = 0
        for i in range(len(nums)):
            cap = min(maxL_d[i], maxR_d[i]) - nums[i]
            if cap >0:
                res += cap
                
        return res